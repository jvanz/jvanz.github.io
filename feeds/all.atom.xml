<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>vanz</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2020-01-26T00:00:00-03:00</updated><entry><title>How can we climb a tree structure?</title><link href="/how-can-we-climb-a-tree-structure.html" rel="alternate"></link><published>2020-01-26T00:00:00-03:00</published><updated>2020-01-26T00:00:00-03:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2020-01-26:/how-can-we-climb-a-tree-structure.html</id><summary type="html">&lt;p&gt;These days I was writing a solution for a challenge in the &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt; and I
ended up writing a algorithm to walk through a tree structure. Nothing too special
but I decided to white an article about the algorithms we can use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://media.giphy.com/media/PfSuiwg3WO9K8/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;There are many types of tree out there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These days I was writing a solution for a challenge in the &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt; and I
ended up writing a algorithm to walk through a tree structure. Nothing too special
but I decided to white an article about the algorithms we can use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://media.giphy.com/media/PfSuiwg3WO9K8/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;There are many types of tree out there. But to keep the simplicity, will not 
cover some aspects like balanced trees, add node, remove a node, delete a 
section of the tree, among other things. Let's focus how to walk through trees. 
In this article we will use the following tree structure in our examples:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/tree.png"&gt;&lt;/p&gt;
&lt;h3&gt;What's a tree?&lt;/h3&gt;
&lt;p&gt;Before see how to climb a tree, we need to define what is a tree in the first 
place.  We can say that a tree is kind of a graph. But we will not cover graphs 
in depth here. So, let's not been so pedantic and use a more simple definition. 
We can say that a tree is compose of bunch of nodes connected with a parent/children 
relationship. What's a node? Well, a node is a data structure with a value, and 
a list of children nodes.&lt;/p&gt;
&lt;p&gt;A node in a tree may have none, one, two or many children nodes. In this article 
we will focus on binary tree. Which means that the nodes in our tree will have 
2 children nodes at most. As you can see in the tree shown before, no node has 
more than 2 children. &lt;/p&gt;
&lt;p&gt;In our example, the value of each node is a integer. But it can be anything, 
even another tree. This will vary depending of application. In our tree the node 
&lt;code&gt;33&lt;/code&gt; is the root node. The root node is the node which has no parent, it's the 
topmost node. All the algorithms show in the article start in the root node. 
The nodes &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;18&lt;/code&gt;, &lt;code&gt;36&lt;/code&gt;, &lt;code&gt;39&lt;/code&gt; and &lt;code&gt;49&lt;/code&gt; are the leaf nodes.  Leaf nodes has not children. &lt;/p&gt;
&lt;h3&gt;Algorithms&lt;/h3&gt;
&lt;p&gt;The following section describe the 3 main ways you can visit the nodes in a tree. 
You will see a gif showing the order in each node is visited. Black nodes mean 
that it has been visited. The main algorithms covered is &lt;code&gt;preorder&lt;/code&gt;, &lt;code&gt;inorder&lt;/code&gt; and &lt;code&gt;posorder&lt;/code&gt;.
Their names came from the relative root position with respect to its sub trees. Thus,
&lt;code&gt;preorder&lt;/code&gt; root node come first. &lt;code&gt;posorder&lt;/code&gt; the root node is the last to be visited.
&lt;code&gt;inorder&lt;/code&gt;the root node is visited between its left and right sub trees.&lt;/p&gt;
&lt;p&gt;The 3 following algorithms visit each node once. Thus, their running time is &lt;code&gt;O(n)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Preorder traversal&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/preorder.gif"&gt;&lt;/p&gt;
&lt;p&gt;Ok, let's start with the pre order traversal. In this algorithm, as the name
suggests, we visit the tree nodes in the following order: root, left, right. 
When we walk though a tree using the pre order traversal we fist visit the 
root node, the current node which we are sitting on. Then, we visit the node 
in the left and by consequence the whole sub tree. After that, we do the same 
with the right node and its sub tree. Considering our tree, the nodes would be 
visited in the following order: &lt;code&gt;33 15 10 5 20 18 47 38 36 39 51 49&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A possible recursive pseudocode this algorithms is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// preorder the root come before its subtrees
def preorder-traversal(root):
    if root == null:
        return
    visit(root)
    preorder-traversal(root.left)
    preorder-traversal(root.right)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Posorder traversal&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/posorder.gif"&gt;&lt;/p&gt;
&lt;p&gt;When we walk though a tree using the pos order traversal we fist visit the
left, the right node and their sub tree and then the root node. If we run this 
algorithm using our tree as the input, the visit would be:
&lt;code&gt;5 10 18 20 15 36 39 38 49 51 47 33&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A possible recursive pseudocode this algorithms is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// posorder the root come after its subtrees
def posorder-traversal(root):
    if root == null:
        return

    posorder-traversal(root.left)
    posorder-traversal(root.right)
    visit(root)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Inorder traversal&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/inorder.gif"&gt;&lt;/p&gt;
&lt;p&gt;When we walk though a tree using the in order traversal we fist visit the
left, the root and then right node and its sub tree. If we run this 
algorithm using our tree as the input, the visit would be:
&lt;code&gt;5 10 15 18 20 33 36 38 39 47 49 51&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A possible recursive pseudocode this algorithms is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// inorder the root come between its subtrees
def inorder-traversal(root):
    if root == null:
        return

    inorder-traversal(root.left)
    visit(root)
    inorder-traversal(root.right)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Level order traversal&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/images/level-order.gif"&gt;&lt;/p&gt;
&lt;p&gt;Different from the previous traversals this algorithm does not walk though the
tree following the children nodes. It walk though the tree by level. This means that
all the node in the same level as visit before move to the next level in the tree.
Still using our tree as input example, this is the output: &lt;code&gt;33 15 47 10 20 38 51 5 18 36 39 49&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I would say we can consider that level order traversal a variation of the preorder
algorithm. The difference here is that we will use an auxiliary queue to visit 
the node. But it will continue visiting the nodes in the preorder. Take a look
in the pseudocode here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def level-order(root):
    queue q;
    q.push(root)
    while (q is not empty):
        visit(q.top)
        q.push(q.top.left)
        q.push(q.top.right)
        q.pop()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just a quick note. Remember, a tree is a graph. Thus, we can consider the level 
order traversal as a &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;breadth first search&lt;/a&gt;. 
The previous algorithms (&lt;code&gt;preorder&lt;/code&gt;, &lt;code&gt;posorder&lt;/code&gt; and &lt;code&gt;inorder&lt;/code&gt;) are &lt;a href="https://en.wikipedia.org/wiki/Depth-first_search"&gt;depth first 
search&lt;/a&gt;. Because they go as 
depth as possible first. ;-)&lt;/p&gt;
&lt;h3&gt;Vertical order traversal&lt;/h3&gt;
&lt;p&gt;The vertical order traversal, differently from the previous traversals and as 
the name suggests, walk through our tree in a vertical order. This means that, 
instead of visiting all the left, root or right node first, it visit all the nodes in 
the same horizontal distance from the root. &lt;/p&gt;
&lt;h4&gt;Horizontal distance&lt;/h4&gt;
&lt;p&gt;The horizontal distance (HD) of a node in the tree is the distance from the root
node following this rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The HD of the root node is 0;&lt;/li&gt;
&lt;li&gt;When move to a node in the left, subtract one (-1) from the distance;&lt;/li&gt;
&lt;li&gt;When move to a node in the right, add one (+1) from the distance;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a look in the HD for each node from the previous tree:
&lt;img alt="" src="/images/horizontal_distance_values_tree.png"&gt;&lt;/p&gt;
&lt;p&gt;Coming back to our example tree and considering that we are using a 
&lt;code&gt;preorder&lt;/code&gt; algorithm. This means that our tree will be visit in the following order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5       // HD -3
10      // HD -2
15 18 36    // HD -1
33 20 38    // HD 0
47 39 49    // HD 1
51      // HD 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we give different colors for each HD, we can visualize the tree as the fillowing:
&lt;img alt="" src="/images/tree-hd-colors.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, a pseudocode can be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// function to find the horizontal distances of each nodes
def get-vertical-distances(distances, root, distance):
    if root is nil
        return
    // add the node in the node list for its HD
    distances[distance].append(root) 
    // recursive call in the left sub tree
    get-vertical-distances(distances, root.left, distances-1) 
    // recursive call in the right sub tree
    get-vertical-distances(distances, root.right, distances+1) 


// vertical order traveral
def vertical-order(root):
    // map to store the node with the same HD
    map&amp;lt;hd, list&amp;lt;nodes&amp;gt;&amp;gt; distances
    // find the nodes HD and populate the map
    get-vertical-distances(distances, root, 0)
    // visit the node by their distance
    for each distance in distances:
        for each node in distance:
            visit(node)
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;That's all for now!&lt;/h5&gt;
&lt;p&gt;As always if you saw something wrong or know how to improve the article. Please,
let me know. Thanks!&lt;/p&gt;
&lt;h5&gt;References&lt;/h5&gt;
&lt;p&gt;I have some simple implementation of this algorithms in my sandbox &lt;a href="https://github.com/jvanz/algorithms"&gt;repository&lt;/a&gt;.
If you're interested in C++ and a real implementation of these algorithms, 
you are welcome to check it out. It's not something to be used in production, 
but you can take a look and show me if I'm doing something wrong! :)&lt;/p&gt;
&lt;p&gt;I've used Latex to create the trees for this article: &lt;a href="http://www.texample.net/tikz/examples/red-black-tree/"&gt;Example: Red-black tree&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you interested in more depth material. These books can be useful:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Art-Computer-Programming-Vol-Fundamental/dp/0201896834/ref=sr_1_5?keywords=knuth&amp;amp;qid=1580064084&amp;amp;sr=8-5"&gt;The Art of Computer Programming, Vol. 1: Fundamental Algorithms, 3rd Edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844/ref=sr_1_1?crid=2GQPUFV6PCZJ5&amp;amp;keywords=algorithms+cormen&amp;amp;qid=1580065268&amp;amp;sprefix=algori%2Caps%2C332&amp;amp;sr=8-1"&gt;Introduction to Algorithms, 3rd Edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Algorithms-Illuminated-Part-1-Basics/dp/0999282905/ref=sr_1_2?crid=21RDTL7FTNOI7&amp;amp;keywords=algorithms+illuminated&amp;amp;qid=1580065761&amp;amp;sprefix=algorithms+%2Caps%2C317&amp;amp;sr=8-2"&gt;Algorithms Illuminated: Part 1: The Basics&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="tree"></category><category term="data-structure"></category><category term="algorithms"></category></entry><entry><title>Como funciona o robozinho do Serenata que baixa os diários oficiais?</title><link href="/como-funciona-o-robozinho-do-serenata-que-baixa-os-diarios-oficiais.html" rel="alternate"></link><published>2019-11-28T00:00:00-03:00</published><updated>2019-12-10T20:00:00-03:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2019-11-28:/como-funciona-o-robozinho-do-serenata-que-baixa-os-diarios-oficiais.html</id><summary type="html">&lt;p&gt;Recentemente comecei a fazer parte do programa de &lt;a href="https://embaixadoras.ok.org.br/"&gt;embaixadores&lt;/a&gt; da Open Knowledge Brasil (OKBR). Como minha primeira contribuição, comecei adicionar novos spiders no &lt;a href="https://github.com/okfn-brasil/diario-oficial"&gt;diario-oficial&lt;/a&gt;. Esse repositório possui diversos spiders para a raspagem de dados dos diários oficiais de cada município brasileiro. Como sou de Santa Catarina, decidi inicial
com as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recentemente comecei a fazer parte do programa de &lt;a href="https://embaixadoras.ok.org.br/"&gt;embaixadores&lt;/a&gt; da Open Knowledge Brasil (OKBR). Como minha primeira contribuição, comecei adicionar novos spiders no &lt;a href="https://github.com/okfn-brasil/diario-oficial"&gt;diario-oficial&lt;/a&gt;. Esse repositório possui diversos spiders para a raspagem de dados dos diários oficiais de cada município brasileiro. Como sou de Santa Catarina, decidi inicial
com as cidades do meu Estado. Felizmente, no tempo de escrita deste artigo, minha primeira &lt;a href="https://github.com/okfn-brasil/diario-oficial/pull/135"&gt;pull request&lt;/a&gt; está aguardando aprovação! :)&lt;/p&gt;
&lt;p&gt;Durante esse meio tempo, outros embaixadores demonstraram interesse em adicionar ou modificar os spiders para suas cidades. Ai que entra esse artigo... eu pretendo explicar na forma mais didática que eu conseguir, tudo o que é necessário para começar a entender como adicionar ou alterar um spider. Para isso, irei explicar como funciona cada parte necessária para isso. Incluindo como baixar o código, como rodar um spider, um pouco de python, &lt;a href="https://scrapy.org/"&gt;Scrapy&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;HTML&lt;/a&gt;, entre outros.
Não pretendo ser muito técnico para deixar o documento mais acessivel possível. Mas também não muito superficial que não diga nada. Ou seja, existe a possiblidade de não agradar ninguém. xD.&lt;/p&gt;
&lt;p&gt;Por favor, entre em contato se sentir falta de algo! Então vamos lá...&lt;/p&gt;
&lt;h3&gt;diario-oficial&lt;/h3&gt;
&lt;p&gt;O projeto &lt;a href="https://github.com/okfn-brasil/diario-oficial"&gt;diario-oficial&lt;/a&gt; da OKBR, tem como objetivo realizar a raspagem de dados dos diário oficiais do maior número de municípios brasileiros possíveis. Como fazemos isso? Bom, os diários oficiais são distribuídos em arquivos doc, pdf e etc. Para conseguir ter todos esses arquivos utilizamos um robozinho que literalmente abre todas as páginas dos diários oficiais de cada município e baixa todos esses arquivos. Uma vez com os arquivos baixados, convertemos eles em texto (arquivos txt) e pronto! Depois disso podem ser analisados mais facilmente com as mágicas da ciência de dados! :-)&lt;/p&gt;
&lt;p&gt;Antes de mais nada vamos rodar um spider para ver como funciona. Depois vamos ver como ele é escrito. Para baixar o projeto você ira precisar do &lt;code&gt;git&lt;/code&gt;. A instalação do &lt;code&gt;git&lt;/code&gt; vai variar de acordo com seu ambiente. Veja a documentação sobre a instalação &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;aqui&lt;/a&gt;. Se precisar de ajuda, não deixe de falar nos canais de comunicação dos Embaixadores ou do Serenata. Podemos ajudar por lá! Aliás, esse artigo será todo baseado no meu ambiente, que é um Linux. Não creio que vão existir grandes diferenças entre os sistemas que possa impossibilitar de seguir esse material. A principal diferença, acredito, que seja como irá baixar o repositório do projeto. Mas como disse anteriormente, não hesite em perguntar!&lt;/p&gt;
&lt;p&gt;Blz, uma vez com o &lt;code&gt;git&lt;/code&gt;instalado precisamos baixar o repositório, ou seja o código que o robozinho ira executar. Para isso, vá até a página do &lt;a href="https://github.com/okfn-brasil/diario-oficial"&gt;projeto&lt;/a&gt; no github e copie a URL:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/repo_diario_oficial.png"&gt;&lt;/p&gt;
&lt;p&gt;Uma vez com a URL podemos clonar o repositório. Clonar é um termo do &lt;code&gt;git&lt;/code&gt; que basicamente é um sinônimo para baixar um repositório:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jvanz@earth:~&amp;gt; git clone https://github.com/okfn-brasil/diario-oficial.git
Cloning into &lt;span class="s1"&gt;&amp;#39;diario-oficial&amp;#39;&lt;/span&gt;...
remote: Enumerating objects: &lt;span class="m"&gt;30&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Counting objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;/30&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Compressing objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;/21&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;2253&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;19&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;2223&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2253&lt;/span&gt;/2253&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;11&lt;/span&gt;.68 MiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;.04 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1320&lt;/span&gt;/1320&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora que você já tem o código fonte na sua máquina, podemos executar algum spider que já existe. Os spider já existentes podem ser encontrados no diretório &lt;code&gt;processing/data_collection/gazette/spiders/&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jvanz@earth:~/diario-oficial&amp;gt; ls processing/data_collection/gazette/spiders/
al_maceio.py            base.py                      go_goiania.py       pr_cascavel.py       pr_maringa.py         rr_boa_vista.py      sp_campinas.py   sp_jundiai.py              to_palmas.py
am_manaus.py            ce_fortaleza.py              __init__.py         pr_curitiba.py       pr_ponta_grossa.py    rs_caxias_do_sul.py  sp_franca.py     sp_santos.py
ba_feira_de_santana.py  es_associacao_municipios.py  mg_uberaba.py       pr_foz_do_iguacu.py  rj_rio_de_janeiro.py  rs_porto_alegre.py   sp_guaruja.py    sp_sao_jose_dos_campos.py
ba_salvador.py          go_aparecida_de_goiania.py   ms_campo_grande.py  pr_londrina.py       ro_porto_velho.py     sc_florianopolis.py  sp_guarulhos.py  to_araguaina.py
jvanz@earth:~/diario-oficial&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora que já sabemos quais sãos as cidades já mapeadas, vamos rodar nosso robozinho para baixar os arquivos?
Para rodar o robozinho e baixar os arquivos de Florianópolis - SC, podemos executar o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose run --rm processing bash -c &lt;span class="s2"&gt;&amp;quot;cd data_collection &amp;amp;&amp;amp; scrapy crawl sc_florianopolis&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que para executar o nosso robô, precisamos instalar o docker e o docker-comose. Veja como instala-los &lt;a href="https://docs.docker.com/v17.12/docker-for-windows/install/"&gt;aqui&lt;/a&gt; e &lt;a href="https://docs.docker.com/compose/install/"&gt;aqui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Você provavelmente irá ver algo parecido com isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2019-11-26 01:40:56 [scrapy.utils.log] INFO: Scrapy 1.6.0 started (bot: gazette)
2019-11-26 01:40:56 [scrapy.utils.log] INFO: Versions: lxml 4.4.1.0, libxml2 2.9.9, cssselect 1.1.0, parsel 1.5.2, w3lib 1.21.0, Twisted 19.10.0, Python 3.6.8 (default, Jun 11 2019, 01:16:11) - [GCC 6.3.0 20170516], pyOpenSSL 19.0.0 (OpenSSL 1.1.1d  10 Sep 2019), cryptography 2.8, Platform Linux-4.12.14-lp151.28.20-default-x86_64-with-debian-9.9
2019-11-26 01:40:56 [scrapy.crawler] INFO: Overridden settings: {&amp;#39;BOT_NAME&amp;#39;: &amp;#39;gazette&amp;#39;, &amp;#39;LOG_FILE&amp;#39;: &amp;#39;sc_florianopolis&amp;#39;, &amp;#39;NEWSPIDER_MODULE&amp;#39;: &amp;#39;gazette.spiders&amp;#39;, &amp;#39;SPIDER_MODULES&amp;#39;: [&amp;#39;gazette.spiders&amp;#39;]}
2019-11-26 01:40:56 [scrapy.extensions.telnet] INFO: Telnet Password: bc2ce55e70ec1566
2019-11-26 01:40:56 [scrapy.middleware] INFO: Enabled extensions:
[&amp;#39;scrapy.extensions.corestats.CoreStats&amp;#39;,
 &amp;#39;scrapy.extensions.telnet.TelnetConsole&amp;#39;,
 &amp;#39;scrapy.extensions.memusage.MemoryUsage&amp;#39;,
 &amp;#39;scrapy.extensions.logstats.LogStats&amp;#39;]
2019-11-26 01:40:56 [scrapy.middleware] INFO: Enabled downloader middlewares:
[&amp;#39;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.retry.RetryMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&amp;#39;,
 &amp;#39;scrapy.downloadermiddlewares.stats.DownloaderStats&amp;#39;]
2019-11-26 01:40:56 [scrapy.middleware] INFO: Enabled spider middlewares:
[&amp;#39;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&amp;#39;,
 &amp;#39;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&amp;#39;,
 &amp;#39;scrapy.spidermiddlewares.referer.RefererMiddleware&amp;#39;,
 &amp;#39;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&amp;#39;,
 &amp;#39;scrapy.spidermiddlewares.depth.DepthMiddleware&amp;#39;]
2019-11-26 01:40:56 [scrapy.middleware] INFO: Enabled item pipelines:
[&amp;#39;gazette.pipelines.GazetteDateFilteringPipeline&amp;#39;,
 &amp;#39;gazette.parser.GazetteFilesPipeline&amp;#39;,
 &amp;#39;scrapy.pipelines.files.FilesPipeline&amp;#39;,
 &amp;#39;gazette.pipelines.ExtractTextPipeline&amp;#39;,
 &amp;#39;gazette.pipelines.PostgreSQLPipeline&amp;#39;]
2019-11-26 01:40:56 [scrapy.core.engine] INFO: Spider opened
2019-11-26 01:40:56 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2019-11-26 01:40:56 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:57 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
2019-11-26 01:40:58 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; (referer: None)
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (downloaded): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; (referer: None)
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (downloaded): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (uptodate): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (uptodate): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.core.scraper] DEBUG: Scraped from &amp;lt;200 http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt;
{&amp;#39;date&amp;#39;: datetime.date(2019, 11, 18),
 &amp;#39;file_checksum&amp;#39;: &amp;#39;f24ca0401f64b6de3dc8a647dcbbea52&amp;#39;,
 &amp;#39;file_path&amp;#39;: &amp;#39;full/c7955799d47d4fe59b6f582dad4b5c172508dac9.pdf&amp;#39;,
 &amp;#39;file_url&amp;#39;: &amp;#39;http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;#39;,
 &amp;#39;is_extra_edition&amp;#39;: False,
 &amp;#39;power&amp;#39;: &amp;#39;executive_legislature&amp;#39;,
 &amp;#39;scraped_at&amp;#39;: datetime.datetime(2019, 11, 26, 1, 40, 57, 88559),
 &amp;#39;source_text&amp;#39;: &amp;#39;                            DIÁRIO OFICIAL ELETRÔNICO\n&amp;#39;
                &amp;#39;                                              DO MUNICÍPIO DE &amp;#39;
                &amp;#39;FLORIANÓPOLIS\n&amp;#39;
                &amp;#39;Edição Nº 2568                          Florianópolis/SC, &amp;#39;
                &amp;#39;segunda-feira, 18 de novembro de &amp;#39;
                &amp;#39;2019                                                                  &amp;#39;
                &amp;#39;pg. 1\n&amp;#39;
                &amp;#39;                              &amp;#39;
                &amp;#39;Sumário:                                         &amp;#39;
                &amp;#39;Administrativo e Financeiro, lotado na Secretaria\n&amp;#39;
                &amp;#39;Orgãos &amp;#39;
                &amp;#39;Municipais                                                     &amp;#39;
                &amp;#39;Pg.      Municipal da Casa Civil, matrícula 49327-9,\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DA CASA &amp;#39;
                &amp;#39;CIVIL                                     1\n&amp;#39;
                &amp;#39;                                                                               &amp;#39;
                &amp;#39;devidamente habilitado pela CNH sob nº\n&amp;#39;
                &amp;#39;                                                                               &amp;#39;
                &amp;#39;05084675850, categoria AB. Art. 2º A\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
                &amp;#39;ADMINISTRAÇÃO                                  1\n&amp;#39;
                &amp;#39;                                                                               &amp;#39;
                &amp;#39;responsabilidade administrativa, civil e penal, em\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DA FAZENDA                   &amp;#39;
                &amp;#39;2                            caso de colisões, lesões &amp;#39;
                &amp;#39;corporais ou mesmo óbitos\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DE TRANSPARÊNCIA,AUDITORIA &amp;#39;
                &amp;#39;E                              decorrentes do objetivo desta &amp;#39;

                [...]
                Texto omitido porque é MUITA coisa
                [...]

                &amp;#39;Portaria, qual seja,\n&amp;#39;
                &amp;#39;CONTROLE                                          &amp;#39;
                &amp;#39;4                            autorizar a condução do &amp;#39;
                &amp;#39;automóvel da Secretaria\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
                &amp;#39;EDUCAÇÃO                                       5       &amp;#39;
                &amp;#39;Municipal da Casa Civil, conforme termo de\n&amp;#39;
                &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
                &amp;#39;INFRAESTRUTURA                                 6       &amp;#39;
                              &amp;#39;\n&amp;#39;
                &amp;#39;\n&amp;#39;
                &amp;#39;\n&amp;#39;
                &amp;#39;S.M.C.C.\n&amp;#39;
                &amp;#39;SECRETÁRIO: EVERSON &amp;#39;
                &amp;#39;MENDES                                        CONTROLE: &amp;#39;
                &amp;#39;THAMARA MALTA                                            &amp;#39;
                &amp;#39;TELEFONE: (48) 3251-6062\n&amp;#39;
                &amp;#39;\x0c&amp;#39;,
 &amp;#39;territory_id&amp;#39;: &amp;#39;4205407&amp;#39;}
2019-11-26 01:40:58 [scrapy.core.scraper] DEBUG: Scraped from &amp;lt;200 http://www.pm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos dar uma analisada no que isso tudo significa.&lt;/p&gt;
&lt;p&gt;Essa linha mostra qual é a página de web que o nosso robô está acessando e procurando os arquivos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2019-11-26 01:40:56 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;POST http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt; (referer: None)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse são arquivos que ele encontrou e baixou:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2019-11-26 01:40:58 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; (referer: None)
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (downloaded): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.core.engine] DEBUG: Crawled (200) &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; (referer: None)
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (downloaded): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (uptodate): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
2019-11-26 01:40:58 [scrapy.pipelines.files] DEBUG: File (uptodate): Downloaded file from &amp;lt;GET http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_23.01.36.df3583c76e3e2ce083a2275cf3e9adbe.pdf&amp;gt; referred in &amp;lt;None&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Da uma olhada nisso, aqui é texto extraido do arquivo baixado no site do diário oficial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2019-11-26 01:40:58 [scrapy.core.scraper] DEBUG: Scraped from &amp;lt;200 http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;gt;
{&amp;#39;date&amp;#39;: datetime.date(2019, 11, 18),
 &amp;#39;file_checksum&amp;#39;: &amp;#39;f24ca0401f64b6de3dc8a647dcbbea52&amp;#39;,
 &amp;#39;file_path&amp;#39;: &amp;#39;full/c7955799d47d4fe59b6f582dad4b5c172508dac9.pdf&amp;#39;,
 &amp;#39;file_url&amp;#39;: &amp;#39;http://www.pmf.sc.gov.br/arquivos/diario/pdf/18_11_2019_20.19.06.6b3ba3f7d8914621f5065d4d0f6c9d5e.pdf&amp;#39;,
 &amp;#39;is_extra_edition&amp;#39;: False,
 &amp;#39;power&amp;#39;: &amp;#39;executive_legislature&amp;#39;,
 &amp;#39;scraped_at&amp;#39;: datetime.datetime(2019, 11, 26, 1, 40, 57, 88559),
 &amp;#39;source_text&amp;#39;: &amp;#39; DIÁRIO OFICIAL ELETRÔNICO\n&amp;#39;
 &amp;#39; DO MUNICÍPIO DE &amp;#39;
 &amp;#39;FLORIANÓPOLIS\n&amp;#39;
 &amp;#39;Edição Nº 2568 Florianópolis/SC, &amp;#39;
 &amp;#39;segunda-feira, 18 de novembro de &amp;#39;
 &amp;#39;2019 &amp;#39;
 &amp;#39;pg. 1\n&amp;#39;
 &amp;#39; &amp;#39;
 &amp;#39;Sumário: &amp;#39;
 &amp;#39;Administrativo e Financeiro, lotado na Secretaria\n&amp;#39;
 &amp;#39;Orgãos &amp;#39;
 &amp;#39;Municipais &amp;#39;
 &amp;#39;Pg. Municipal da Casa Civil, matrícula 49327-9,\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DA CASA &amp;#39;
 &amp;#39;CIVIL 1\n&amp;#39;
 &amp;#39; &amp;#39;
 &amp;#39;devidamente habilitado pela CNH sob nº\n&amp;#39;
 &amp;#39; &amp;#39;
 &amp;#39;05084675850, categoria AB. Art. 2º A\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
 &amp;#39;ADMINISTRAÇÃO 1\n&amp;#39;
 &amp;#39; &amp;#39;
 &amp;#39;responsabilidade administrativa, civil e penal, em\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DA FAZENDA &amp;#39;
 &amp;#39;2 caso de colisões, lesões &amp;#39;
 &amp;#39;corporais ou mesmo óbitos\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DE TRANSPARÊNCIA,AUDITORIA &amp;#39;
 &amp;#39;E decorrentes do objetivo desta &amp;#39;
                  [...]
                Texto omitido porque é MUITA coisa
                [...]
 &amp;#39;Portaria, qual seja,\n&amp;#39;
 &amp;#39;CONTROLE &amp;#39;
 &amp;#39;4 autorizar a condução do &amp;#39;
 &amp;#39;automóvel da Secretaria\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
 &amp;#39;EDUCAÇÃO 5 &amp;#39;
 &amp;#39;Municipal da Casa Civil, conforme termo de\n&amp;#39;
 &amp;#39;SECRETARIA MUNICIPAL DE &amp;#39;
 &amp;#39;INFRAESTRUTURA 6 &amp;#39;
 &amp;#39;\n&amp;#39;
 &amp;#39;\n&amp;#39;
 &amp;#39;\n&amp;#39;
 &amp;#39;S.M.C.C.\n&amp;#39;
 &amp;#39;SECRETÁRIO: EVERSON &amp;#39;
 &amp;#39;MENDES CONTROLE: &amp;#39;
 &amp;#39;THAMARA MALTA &amp;#39;
 &amp;#39;TELEFONE: (48) 3251-6062\n&amp;#39;
 &amp;#39;\x0c&amp;#39;,
 &amp;#39;territory_id&amp;#39;: &amp;#39;4205407&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você pode deixar rodando até o robozinho baixar tudo, mas isso vai levar um tempinho. Para parar o robô, aperte &lt;code&gt;Ctrl + c&lt;/code&gt;.
Agora dê uma olhada nos arquivos baixados em &lt;code&gt;data/full&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jvanz@earth:~/serenata/diario-oficial&amp;gt; ls data/full/                                                                                                                                                              
000206dc56c5753213168d1aad67e6d925862c0b.doc       3f67f0c7ee0e054bd477dd585bcaf895c712a175.doc.txt   7f3e870070e45083e503cc9858068d0dd87af122.pdf.txt   bf7f18a1e85067bee44f26cb5cd62274df08aa89.doc             
000206dc56c5753213168d1aad67e6d925862c0b.doc.txt   3f6a9abc3115beaa26b20cd5e43f403a570c9a4e.doc       7f3fb482b9472f8fcc03c84090ee9825b19b9483.doc       bf7f18a1e85067bee44f26cb5cd62274df08aa89.doc.txt         
00067ca470afa2d2ac2f9fffc0bc4f6c9e9cc0ef.pdf       3f6a9abc3115beaa26b20cd5e43f403a570c9a4e.doc.txt   7f3fb482b9472f8fcc03c84090ee9825b19b9483.doc.txt   bf7f52e8382df0d6ec569dae967018a07168c672.doc             
00067ca470afa2d2ac2f9fffc0bc4f6c9e9cc0ef.pdf.txt   3f6b8276365051fce95e154c128d2cca300b2ea0.doc       7f45558c7ade30fecb2f3c068be633190953fb71.doc       bf7f52e8382df0d6ec569dae967018a07168c672.doc.txt         
000ce6ae16c71f4e082191be246d8f5b0925984e.doc       3f6b8276365051fce95e154c128d2cca300b2ea0.doc.txt   7f45558c7ade30fecb2f3c068be633190953fb71.doc.txt   bf807874e9126e9c019490b236288c36d8622f43.pdf             
000ce6ae16c71f4e082191be246d8f5b0925984e.doc.txt   3f6e379f971523a0827788f275ad606d1bec2f93.doc       7f49aafd3f51b330136164aca8170a26ab8c679e.doc       bf807874e9126e9c019490b236288c36d8622f43.pdf.txt         
0011b654ba29d6d4415908f1251245b4f7f3909e.doc       3f6e379f971523a0827788f275ad606d1bec2f93.doc.txt   7f49aafd3f51b330136164aca8170a26ab8c679e.doc.txt   bf82c035df0480b351e5594baf9d55262562d307.doc             
0011b654ba29d6d4415908f1251245b4f7f3909e.doc.txt   3f70de7787371b4b2676a61587a592239311988c.doc       7f5168d009b6c54d1f03f8663d56e5692fe29af1.doc       bf82c035df0480b351e5594baf9d55262562d307.doc.txt         
00139767bba460a2d731e7e08f69d1ad065d9d42.pdf       3f70de7787371b4b2676a61587a592239311988c.doc.txt   7f5168d009b6c54d1f03f8663d56e5692fe29af1.doc.txt   bf8c5d2b8a0ffd03090a25d66791c9a58e1da1f5.doc             
00139767bba460a2d731e7e08f69d1ad065d9d42.pdf.txt   3f7393fbda95cc315b50af2af0f22f11ffbf818a.doc       7f554d50573d1d4fb1106ca921ab810e6e928de1.doc       bf8c5d2b8a0ffd03090a25d66791c9a58e1da1f5.doc.txt         
00195ec0e20d47e36f9dd156652c971d01e996e3.pdf       3f7393fbda95cc315b50af2af0f22f11ffbf818a.doc.txt   7f554d50573d1d4fb1106ca921ab810e6e928de1.doc.txt   bf8f2dc63020f0fd4d354a1780b5393dc88828c0.pdf             
00195ec0e20d47e36f9dd156652c971d01e996e3.pdf.txt   3f77937f5e7cfa9e2019dec8b28cfc1d1e4f091e.doc       7f5bd9eb72d24d7ce3c40b1f8a8885c5cedc606a.doc       bf8f2dc63020f0fd4d354a1780b5393dc88828c0.pdf.txt         
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ótimo! Agora que você já rodou o robô. Está na hora de entendermos mais a fundo algumas partes que fazem isso tudo funcionar.&lt;/p&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;Python é a linguagem de programação que utilizamos para escrever o nosso robô. Não pretendo me aprofundar muito em Python porque isso é um mundo gigantesco que, por si só, renderia muito e muitos artigos. Mas para ajudar aqueles que estão querendo aprender, sugiro alguns materiais que podem ser encontrados na Internet:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCripRddD4BnaMcU833ExuwA/feed"&gt;Python para zumbis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pythonbnu/workshop-python-iniciante"&gt;Tutorial realizado pelo Grupy Blumenau&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Scrapy&lt;/h3&gt;
&lt;p&gt;Scrapy é a biblioteca que utilizamos para acessar, navegar e encontrar os que queremos nas páginas dos diários oficiais. Podemos dizer que é o coração do nosso robô. Essa lib faz o trabalho sujo que baixar e deixar disponíveis de maneira mais fácil os dados das páginas que estamos vasculhando.&lt;/p&gt;
&lt;p&gt;Vamos dar uma olhada como é definido o nosso robô e  a maneira de navegar pelas páginas web.  Ah! Só para deixar claro, "spider" é o nome dados no scrapy para código que irá acessar e baixar os dados do site do diário oficial.
Para exemplificar, vou utilizar a cidade de Florianópolis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateparser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dateutil.relativedelta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FormRequest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gazette.items&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Gazette&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gazette.spiders.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseGazetteSpider&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScFlorianopolisSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseGazetteSpider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sc_florianopolis&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;TERRITORY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4205407&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;AVAILABLE_FROM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# actually from June/2009&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AVAILABLE_FROM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ano&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enviar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;FormRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formdata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;months&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ul.listagem li a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pdf_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Gazette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;file_urls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                &lt;span class="n"&gt;is_extra_edition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;territory_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRITORY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;executive_legislature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;scraped_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pdf_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;relative_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;::attr(href)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;relative_url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.pdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relative_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;::text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\d{1,2}\s+de\s+\w+\s+de\s+\d{4}&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;::text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nas primeiras linhas do script estamos dizendo ao Python o que vamos utilizar. Por hora, vamos ignora-las e focar no spider. A brincadeira começa a ficar séria a partir da linha &lt;code&gt;class ScFlorianopolisSpider(BaseGazetteSpider)&lt;/code&gt;. Não quero entrar em muito detalhes de programação, mas podemos dizer que uma &lt;code&gt;class&lt;/code&gt; (ou classe em português), neste caso, é uma representação de de como iremos navegar e baixar os dados das páginas de internet. As linhas seguintes são:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sc_florianopolis&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;TERRITORY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4205407&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;AVAILABLE_FROM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# actually from June/2009&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O atributo &lt;code&gt;name&lt;/code&gt; diz qual é o nome do spider. Lembra quando rodamos o spider a primeira vez? Então, nós passamos o nome do spider que queríamos rodar. É baseado nesse nome que o scrapy encontra e executa o spider. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;URL&lt;/code&gt; é um atributo que guarda a primeira página que será visitada quando quisermos pegar os dados de Floripa. Veremos como essa informação é utilizada daqui a pouco. &lt;code&gt;TERRITORY_ID&lt;/code&gt; é o código do IBGE da cidade que esse spider está extraindo os dados. &lt;code&gt;AVAILABLE_FROM&lt;/code&gt; é algo especifico desse spider. A data colocada nesse atributo diz ao robozinho desde qual data ele deve procurar os arquivos do diário oficial. Uma informação importante, &lt;code&gt;URL&lt;/code&gt;, &lt;code&gt;AVAILABLE_FROM&lt;/code&gt; e &lt;code&gt;TERRITORY_ID&lt;/code&gt; não são campos utilizados pelo scrapy. Eles são usados no código escrito pelas pessoas que criaram esse spider.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AVAILABLE_FROM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ano&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;passo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enviar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;FormRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formdata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;relativedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;months&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O scrapy espera que o as classes definidas possuam alguns métodos para que possa funcionar corretamente. Quando um spider vai ser executado, o scrapy chama o método &lt;a href="https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.Spider.start_requests"&gt;start_requests&lt;/a&gt; para saber qual é a primeira página que ele deve baixar. Note que o método &lt;code&gt;start_requets&lt;/code&gt; retorna um objeto &lt;a href="https://docs.scrapy.org/en/latest/topics/request-response.html#formrequest-objects"&gt;FormRequest&lt;/a&gt;. Nesse caso, ele representa uma request que deve ser feita.  O scrapy permite que você retorne outros valores nesse método. Mas por motivos de simplicidade, vamos deixar isso para outra hora. O que for baixado da request retornada pelo &lt;code&gt;start_requests&lt;/code&gt; é processado e passado para o método &lt;a href="https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.Spider.parse"&gt;parse&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ul.listagem li a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pdf_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Gazette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;file_urls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt;
                &lt;span class="n"&gt;is_extra_edition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_extra&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;territory_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERRITORY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;executive_legislature&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;scraped_at&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que o método &lt;code&gt;parse&lt;/code&gt; recebe como parametro um objeto. &lt;a href="https://docs.scrapy.org/en/latest/topics/request-response.html#response-objects"&gt;Esse objeto,&lt;/a&gt; que neste caso é chamado de &lt;code&gt;response&lt;/code&gt;, é o que contem o que foi baixado pelo scrapy daquela requisão que você retornou anteriormente no método &lt;code&gt;start_requets&lt;/code&gt;. É aqui que a mágica acontece. É nesse método que você define como nosso robô vai achar os arquivos do diário oficial. Vamos destrinchar o que está acontecendo aqui. &lt;/p&gt;
&lt;p&gt;Logo no início do método é chamado uma função chamada &lt;code&gt;css&lt;/code&gt;. CSS é uma forma que podemos utilizar para encontrar elementos na página. Nesse exemplo, estamos procurando listas não numeradas, que tenham a classe (classe do CSS, não é a mesma classe do python) &lt;code&gt;listagem&lt;/code&gt; e pegando os links que existem nos itens dessa lista. Sei que é um pouco complicado de entender no primeiro momento. Mas logo a seguir teremos uma sessão só para explicar isso. ;)&lt;/p&gt;
&lt;p&gt;Uma vez com os link disponíveis da lista, para cada um deles chamamos o método &lt;code&gt;get_pdf_url&lt;/code&gt; que irá extrair os link dos arquivos do diário oficial. Uma vez com o link, nós retornamos um objeto &lt;code&gt;Gazette&lt;/code&gt;. Um objeto nada mais é do que uma instanciação em memória de uma classe. Lembra da classe que vimos que ensina o nosso robô a encontrar os arquivos, a &lt;code&gt;ScFlorianopolisSpider&lt;/code&gt;? Então, o scrapy instância essa classe e chamar seus métodos. Não se preocupe se não compreendeu isso com 100%. Você vai aprendendo conforme for programando. &lt;/p&gt;
&lt;p&gt;Voltando ao &lt;code&gt;Gazette&lt;/code&gt;... da mesma forma que o &lt;code&gt;ScFlorianopolisSpider&lt;/code&gt; é uma classe que representa a "inteligência" de como o nosso robô sabe baixar os arquivos do diário oficial de Floripa. O &lt;code&gt;Gazette&lt;/code&gt; representa um arquivo do diário oficial encontrado. Essa classe possuir alguns atributos que servem para identificar o arquivo. Como a &lt;code&gt;date&lt;/code&gt; que é a data do diário oficial, &lt;code&gt;file_urls&lt;/code&gt; contem o link para os arquivos do diário, &lt;code&gt;territory_id&lt;/code&gt; é o identificador do município no IBGE, &lt;code&gt;power&lt;/code&gt; diz de qual Poder é o documento. O &lt;code&gt;scraped_at&lt;/code&gt; mostra qual é a data que o arquivo foi baixado.&lt;/p&gt;
&lt;p&gt;Não sei se  você notou que existem mais métodos não citados até agora. São métodos que foram criados para serem utilizados nos métodos citados. Dê uma olhada nele e veja se consegue entender o que eles fazem. Se estiver com dúvidas, não deixe de perguntar nos canais de comunicação dos embaixadores ou me pergunte pelas redes sociais que você pode encontrar aqui no meu blog. &lt;/p&gt;
&lt;p&gt;Continuando... conseguimos baixar a página do diário oficial e encontrar os arquivos. Mas a primeira página do diário não tem todos os arquivos. Precisamos continuar navegando pelas páginas para baixar os que faltam. Temos duas opções:&lt;/p&gt;
&lt;h4&gt;Retorna um objeto request na função &lt;code&gt;parse&lt;/code&gt;.&lt;/h4&gt;
&lt;p&gt;Quando o scrapy chama o método &lt;code&gt;parse&lt;/code&gt;, ele espera de retorno um objeto de que representa uma requisição a outra página, o mesmo tipo de objeto retornado pelo &lt;code&gt;start_requests&lt;/code&gt;, um item (como o &lt;code&gt;Gazette&lt;/code&gt;), ou ainda uma lista/iterável de ambos. Isso significa que se retornarmos um objeto que represente uma requisição, o scrapy irá baixar a página e chamar a função &lt;code&gt;parse&lt;/code&gt; novamente. Se retomarmos um item (&lt;code&gt;Gazette&lt;/code&gt;) o scrapy assume que achamos o que estávamos procurando e passa esse item para o próximo passo na nossa linha de execução. Que nesse caso, é transformar os arquivos em texto e gravar as informações em um banco de dados.&lt;/p&gt;
&lt;p&gt;Quando o método &lt;code&gt;parse&lt;/code&gt; retornar nada, significa que já achamos tudo o que queremos e nosso robô pode parar e recarregar as baterias.&lt;/p&gt;
&lt;h4&gt;Retornar uma lista/iterável na função &lt;code&gt;start_requets&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Dê uma olhada no &lt;code&gt;start_requets&lt;/code&gt; novamente. Note que é usado a palavra reservada &lt;code&gt;yield&lt;/code&gt; ao invés de &lt;code&gt;return&lt;/code&gt;.  Isso significa que o método é uma função geradora. O que isso quer dizer? Novamente, simplificando bastante, é como se o retorno da função fosse tratado como uma lista. Isso faz que quando o scrapy chamar o &lt;code&gt;next&lt;/code&gt; no retorno da &lt;code&gt;start_request&lt;/code&gt; a execução irá continuar a partir de onde o &lt;code&gt;yield&lt;/code&gt; anterior foi chamado. Ou seja, enquanto o &lt;code&gt;start_request&lt;/code&gt; não retorna &lt;code&gt;None&lt;/code&gt; ou uma lista finita de itens, o scrapy continuará baixando as páginas das URL retornadas pela função &lt;code&gt;start_requests&lt;/code&gt;. Entenda mais sobre isso no  &lt;a href="https://www.youtube.com/watch?v=Gre1yR5yH7U"&gt;video&lt;/a&gt; do Python para Zumbies&lt;/p&gt;
&lt;p&gt;Alias! Perceba que a função &lt;code&gt;parse&lt;/code&gt; também é uma função geradora. ;)&lt;/p&gt;
&lt;p&gt;PS: No momento dessa escrita, o spider do Floripa tem um bug. O spider nunca termina. &lt;/p&gt;
&lt;h4&gt;Pipeline&lt;/h4&gt;
&lt;p&gt;Vamos voltar ao que acontece depois que retornamos um item, um arquivo do diário oficial. Uma vez que encontramos algo que estávamos procurando o scrapy passa esse item por uma série de procedimentos definidos em um arquivo de configuração. No scrapy, essa séria de procedimentos é chamada de &lt;a href="https://doc.scrapy.org/en/latest/topics/item-pipeline.html"&gt;pipeline&lt;/a&gt;. Todos os procedimentos executados nesse &lt;code&gt;pipeline&lt;/code&gt; estão definidos no arquivo &lt;code&gt;processing/data_collection/gazette/pipelines.py&lt;/code&gt;. Lá você vai ver o &lt;code&gt;PostgreSQLPipeline&lt;/code&gt; que é a etapa que grava aquelas informações que você definiu la no objeto &lt;code&gt;Gazette&lt;/code&gt; retornado pela função &lt;code&gt;parse&lt;/code&gt; no banco de dados. Existe o &lt;code&gt;GazetteDateFilteringPipeline&lt;/code&gt; que ignora os arquivos do diário oficial anteriores a uma data determinada no spider. Vai ver também o &lt;code&gt;ExtractTextPipeline&lt;/code&gt; é o passo que extrai o texto dos arquivos de PDF, doc e texto.&lt;/p&gt;
&lt;p&gt;Se tudo isso funcionar como o esperado. No final você terá diversos arquivos na pasta &lt;code&gt;data/full&lt;/code&gt;.  :-)&lt;/p&gt;
&lt;h3&gt;HTML, CSS e XPATH&lt;/h3&gt;
&lt;h4&gt;HTML&lt;/h4&gt;
&lt;p&gt;HTML é como são definidas as página web. Por exemplo, esse é uma página web muito simples que você pode salvar em uma arquivo HTML local e abrir em seu navegador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Esse é o título da nossa página! &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         Esse é corpo da página.
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;LInk para o google&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É isso com esse tipo de dados que iremos trabalhar dentro do spiders para achar e detectar os arquivos que estamos procurando. &lt;/p&gt;
&lt;h4&gt;CSS&lt;/h4&gt;
&lt;p&gt;Anteriormente comentei que CSS poderia ser utilizado para encontrar os arquivos dos diários oficiais que estamos procurando. Isso não é totalmente correto. &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/CSS"&gt;CSS&lt;/a&gt; é muito mais que isso. De uma forma beeeeem resumida, CSS é o que deixa as páginas da rede mundial de computadores bonitas! ;-)&lt;/p&gt;
&lt;p&gt;O que nós usamos estamos utilizando são os seletores CSS. Os seletores são utilizados para identificar os elementos da página que queremos modificar. Por exemplo, podemos utilizar seletores para dizer que todas as listas da minha página terão fundo preto e letras verdes. No nosso caso, não utilizamos os seletores para modificar o visual, mas sim, para achar os elementos que nos interessam. Você pode brincar com isso agora mesmo no seu navegador. Vou utilizar o mesmo seletor e página que estamos estudando até agora.&lt;/p&gt;
&lt;p&gt;No seu navegador acesse esse link: http://www.pmf.sc.gov.br/governo/index.php?pagina=govdiariooficial.&lt;/p&gt;
&lt;p&gt;Se a página não mudou desde quando escrevi esse artigo você deverá estar vendo algo parecido com isso:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/diario_pagina.png"&gt;&lt;/p&gt;
&lt;p&gt;Legal, agora vamos brincar com os seletores. Vou utilizar o Firefox, mas o procedimento é muito parecido em outros navegadores. Clique com o botão direito na página e clique na opção "Inspecionar elemento". Agora você deverá estar vendo algo parecido com isso, note que você pode ver o HTML da página(seta 2):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/diario_html.png"&gt;&lt;/p&gt;
&lt;p&gt;Nesssa tela podemos testar o nosso seletor CSS (seta 1) e ver o que ele encontrou (seta 3). Olha só que legal, encontramos 17 items (seta 4). Note que são exatamente os link para os arquivos que estamos procurando! São esses mesmos itens que são processados na função &lt;code&gt;parse&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;XPATH&lt;/h4&gt;
&lt;p&gt;Seletores CSS não são a única forma de você achar os elementos nas páginas. Você pode encontrar utilizando XPATH. Não vou entrar no XPATH nesse momento. Acho que o artigo já tem bastante coisa para todos que estiverem interessado em brincar com por um bom tempo. Além do que, os seletores CSS já podem resolver muitos, senão a maioria, dos casos. Mas para quem ficou interessado tem o seguinte link para a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/XPath"&gt;documentação da Mozilla&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="python"></category><category term="scrapy"></category><category term="html"></category><category term="serenata"></category><category term="css"></category><category term="xpath"></category></entry><entry><title>Hacking your vim with python</title><link href="/hacking-your-vim-with-python.html" rel="alternate"></link><published>2017-01-10T22:55:00-02:00</published><updated>2017-01-10T22:55:00-02:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2017-01-10:/hacking-your-vim-with-python.html</id><summary type="html">&lt;p&gt;I'm happy vim user for a while now. After learned the basics I started customize
the editor to my needs/preferences and for a long time everything were well. I
did not face anything that I could not do and this is still true. However, when
I became a more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm happy vim user for a while now. After learned the basics I started customize
the editor to my needs/preferences and for a long time everything were well. I
did not face anything that I could not do and this is still true. However, when
I became a more advanced user and decide to create more complex functions to help
me while I work in my source code files, something discouraged me go ahead: the
vim language (VimL). Don't judge me, I could study it but I do not have time and
desire to do that. So, for some time I do not create more interesting stuff because
of that. But a short time ago I discovered that I could write python script to
interact with vim, like buffer, windows, tabs and so on! That's great!&lt;/p&gt;
&lt;p&gt;This article is about how create a very simple script to read data from buffer and
update them. :-)&lt;/p&gt;
&lt;p&gt;Before you start write python script to do the magic in your vim buffer it is
necessary take a look if you vim allow you use python. For that you can run the
&lt;code&gt;vim --version&lt;/code&gt; and see if your vim has python support. The output should show
something like &lt;code&gt;+python&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Scripting&lt;/h3&gt;
&lt;p&gt;There are some way you can execute a python code in vim. You can use the commands:
&lt;code&gt;:py[thon]&lt;/code&gt;, &lt;code&gt;:pydo&lt;/code&gt;, &lt;code&gt;:pyfile&lt;/code&gt;. In this article I'll do a short description of
them, but I'll use just &lt;code&gt;:pyfile&lt;/code&gt; in the example.&lt;/p&gt;
&lt;p&gt;When you decide write the python script you can write it in a separated file
or embedded it in your vimrc. If you do not want write file for you script you
can use the &lt;code&gt;:[range]python&lt;/code&gt; or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:[range]py[thon] &amp;lt;&amp;lt; {endmarker}
{script}
{endmarker}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first option is useful if you want to execute a single python statement.
For example: &lt;code&gt;:python print "Python rocks!"&lt;/code&gt;. The second way is more interesting,
it is allows embedded the python code inside vim script. Take a look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;IcecreamInitialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;EOF&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;StrawberryIcecream&lt;/span&gt;:
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;EAT ME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StrawberryIcecream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;ice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;EOF&lt;/span&gt;
&lt;span class="nx"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another option is the &lt;code&gt;[range]pydo {body}&lt;/code&gt; command. It is a good option if the
script should be executed in each line of the range. In this command the &lt;code&gt;{body}&lt;/code&gt;
is executed as &lt;code&gt;def _vim_pydo(line, linenr) {body}&lt;/code&gt;. Thus, the body script can
get the line text and number from arguments. The function should return a string
or None. If a string is returned the line is updated to that value. A possible
example is &lt;code&gt;:pydo return "%s\t%d" % (line[::-1], len(line))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Last but not least is the &lt;code&gt;:[range]pyf[ile] {file}&lt;/code&gt; command. It allows load a
separated python file and call its function with &lt;code&gt;:py&lt;/code&gt; command. This is the
command used to load the python script in the following example.&lt;/p&gt;
&lt;h3&gt;Vim module&lt;/h3&gt;
&lt;p&gt;To make possible the integration between python and vim there is a python module.
This module gives you the ability to interact with buffers, windows, tabs,
execute vim commands and so on. This module has a bunch of methods, constants
and objects that might used for the scripts. This article will use just a few
of the features available in the module. They are: &lt;code&gt;vim.command(str)&lt;/code&gt;;
&lt;code&gt;vim.current&lt;/code&gt;; and &lt;code&gt;Buffer.mark()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see a better documentation of the module typing &lt;code&gt;:help python&lt;/code&gt; in you
vim editor.&lt;/p&gt;
&lt;h3&gt;Let's hack!&lt;/h3&gt;
&lt;p&gt;Let's dive deeper in the example. In this example the author of the script is
a guy that has the boring job to write the current weather of bunch of cities
sitting in some file. Wisely he/she decided automate that process. (Yes, it is not
the ideal real life use case but I am not a creative person, sorry... xD). So, after
some time reading the documentation a python script was born:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/b02e61147a7f05a2a308b3d5b1d0d382.js?file=weather.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3

import vim
from requests import get

OPEN_WEATHER_API_KEY = "your Open Weather API key"

def get_weather():
    """
    Get weather from each line in the buffer
    """
    buff = vim.current.buffer
    for idx, line in enumerate(buff):
        buff[idx] = line + "\t" + get_openweather(line)["weather"][0]["main"] # append the weather in the line


def get_weather_selection():
    """
    Use the selected text to get the weather and append it in the selection row
    """
    buf = vim.current.buffer # get current vim buffer
    start = buf.mark("&lt;") # get the begin of the selection
    end = buf.mark("&gt;") # get the end of the selection
    location = get_text(start, end) # get the selection text with the city name
    line = buf[end[0]-1] + "\t" + get_openweather(location)["weather"][0]["main"] # append the weather in the line
    buf[end[0]-1] = line # update line in the buffer

def get_text(start, end):
    """
    Get text between start and end delimiters
    """
    buf = vim.current.buffer
    text = ""
    for line in buf[start[0]-1:end[0]]:
        text += line
    last_index = (len(text) - len(buf[end[0]-1])) + end[1] + 1
    return text[start[1]:last_index]

def get_openweather(city):
    url="http://api.openweathermap.org/data/2.5/weather" # open weather endpoint
    payload = {"q": city, "APPID": OPEN_WEATHER_API_KEY} # prepare the request params
    request = get(url, payload) # send request to the Open Weather API
    return request.json()&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;It has the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function that will iterate over all rows of the current buffer
and append the current weather for the city (the row's content is used as city's
name)&lt;/li&gt;
&lt;li&gt;function that will use the selected text as city's and append the weather in
the row of the selection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, let's take a closer look... The method &lt;code&gt;get_weather()&lt;/code&gt; allow the user gets
the weather for city names sitting on each line of the current buffer. It's nice
to highlight the &lt;code&gt;vim.current&lt;/code&gt; object. This object provides access to
various objects in vim. That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vim.current.line&lt;/code&gt;: current line (string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.current.buffer&lt;/code&gt;: current buffer (Buffer object)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.current.window&lt;/code&gt;: current window (Window object)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.current.tabpage&lt;/code&gt;: current tab page (TabPage object)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.current.range&lt;/code&gt;: current line range (Range object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That been said, the line &lt;code&gt;buff = vim.current.buffer&lt;/code&gt; is getting the current buffer
to iterate and update it. After that, the script iterate over all buffer's rows
calls the Open Weather API to get the weather using the row's content as city's
name and update the row with the current value appended with the weather.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get_weather_selection()&lt;/code&gt; is the method that uses the selected text as city
to call the weather API. In this method, again, a reference to the current
buffer is gotten and used the &lt;code&gt;buf.mark()&lt;/code&gt; method of the &lt;code&gt;Buffer&lt;/code&gt; object to get
the line and column of the start and end of the selection. In vim the marks "&amp;lt;"
and "&amp;gt;" is used to define the beginning and end of the selected text respectively.&lt;/p&gt;
&lt;p&gt;Once we have the marks values the script calls a helper function who extract the
selected text from the buffer and returns it. After that, the weather API is called
and the weather is appended after the selection&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get_text(start, end)&lt;/code&gt; and &lt;code&gt;get_openweather(city)&lt;/code&gt; methods are helper methods.
First one is able to extract text from the buffer using tuples of (line, column)
passed as arguments to delimitate the text should be returned. The second one
is just a call to the Open Weather API using the python request module.&lt;/p&gt;
&lt;p&gt;Once the script is done it can be loaded with the &lt;code&gt;pyf {file}&lt;/code&gt; command.
As the script in discussion is a python3 code, it has to be load using the
equivalent command to python3, that is: &lt;code&gt;py3file $HOME/.vim/weather.py&lt;/code&gt;. After
added this line in the vimrc, it is ready to go and the methods can be called
with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;py3 get_weather()&lt;/code&gt; or &lt;code&gt;:'&amp;lt;,'&amp;gt;py3 get_weather_selection()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: be aware that there are equivalent commands, &lt;code&gt;py3&lt;/code&gt;, &lt;code&gt;py3do&lt;/code&gt; and &lt;code&gt;py3f&lt;/code&gt; to
run/load python3 code. See more in the python3 section in the vim documentation&lt;/p&gt;
&lt;h4&gt;Buffer&lt;/h4&gt;
&lt;p&gt;The most important object in the example is Buffer. Buffer objects can be treat
as sequence object. Thus, they act like lists and are mutable and to update
a row it is necessary just assign the new value,
&lt;code&gt;vim.current.buffer[1] = "new value for the line 2"&lt;/code&gt;. Remember, lists
indexing start with 0 and the lines in a vim buffer with 1. In the script is
possible see the lines being updated at lines 14 and 26.&lt;/p&gt;
&lt;p&gt;It is also possible delete lines, &lt;code&gt;:py del vim.current.buffer[1]&lt;/code&gt; (delete the second
row). Append new lines, &lt;code&gt;:py vim.current.buffer.append("bottom")&lt;/code&gt;. Assign variables,
&lt;code&gt;:py vim.current.buffer.vars["foo"] = "bar"&lt;/code&gt;, and so on. You can see a complete
description with all methods and attribute with &lt;code&gt;:help python&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Your turn&lt;/h3&gt;
&lt;p&gt;This is a very, very simple example of how you can start script vim with python.
I encourage you to read the vim documentation, play with it and create crazy
stuff! =)&lt;/p&gt;
&lt;p&gt;If you need more info take a look in the references, send me an e-mail or leave
a comment. Thanks you!&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;:help python&lt;/code&gt; in your vim editor&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jvanz/dotfiles/blob/master/.vim/weather.py"&gt;weather.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://old.orestis.gr/blog/2008/08/10/scripting-vim-with-python/"&gt;Scripting Vim with Python&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="vim"></category><category term="python"></category></entry><entry><title>Git: partial commit</title><link href="/git-partial-commit.html" rel="alternate"></link><published>2016-01-28T00:00:00-02:00</published><updated>2016-01-28T00:00:00-02:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2016-01-28:/git-partial-commit.html</id><summary type="html">&lt;p&gt;This post will demonstrate one of many cool features available in Git, partial commit. This feature allows add just
some hunk of a file leaving other ones for future commit.&lt;/p&gt;
&lt;p&gt;Let's suppose in a project there is the following source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This post will demonstrate one of many cool features available in Git, partial commit. This feature allows add just
some hunk of a file leaving other ones for future commit.&lt;/p&gt;
&lt;p&gt;Let's suppose in a project there is the following source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, it&amp;#39;s foo function here&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, it&amp;#39;s bar function here. Wow! You send me a %d... it&amp;#39;s such a number! ;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this brand new repository there is only one commit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_1.png"&gt;&lt;/p&gt;
&lt;p&gt;And the first change is made:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_2.png"&gt;&lt;/p&gt;
&lt;p&gt;Suppose a colleague requests another update in same file. He/She asks to change the name of the &lt;code&gt;foo()&lt;/code&gt; function to
&lt;code&gt;xpto()&lt;/code&gt;. So after both changes the diff is:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_3.png"&gt;&lt;/p&gt;
&lt;p&gt;Nice, now it's time to commit the changes. However, it's necessary commit each hunk in different commits. Fortunately
git has a feature that will help on this situation. The commands &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; allows user to select which
hunks of a file should be added. This is done by passing the &lt;code&gt;-p, --patch&lt;/code&gt; option. In our example, let's use &lt;code&gt;git commit&lt;/code&gt;
to choose the hunks should be added in first commit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_4.png"&gt;&lt;/p&gt;
&lt;p&gt;As can be seen, git shows each hunk and asks the user for what should be done with it. The options are: [y,n,q,a,d,/,s,e,?].
To see help text, type &lt;code&gt;?&lt;/code&gt;. The following text shall be shown:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk or any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, it shown the first file's hunk. In the first commit, should be
committed the changes related with function &lt;code&gt;bar()&lt;/code&gt; only. The this hunk must be
ignored. Thus, the option &lt;code&gt;n&lt;/code&gt; is the right one.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_5.png"&gt;&lt;/p&gt;
&lt;p&gt;In the following, git shows all further changes as an unique hunk. It's necessary
split them the smaller hunks. For do that, there is two options: &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;.
The first one tells git to split the hunk into smaller pieces. The &lt;code&gt;e&lt;/code&gt; option,
in the other hand, allows user choose manually each lines should added. In this
post the go with option &lt;code&gt;s&lt;/code&gt;. Git should shown something similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_6.png"&gt;&lt;/p&gt;
&lt;p&gt;The previous hunk has been split into 3 hunks. Git now will iterate all of them
asking the user what should be done with each one. The first hunk should also be
ignored. The second one is the first change related with the function &lt;code&gt;bar()&lt;/code&gt; and
should be added. To that task, the &lt;code&gt;y&lt;/code&gt; is the right command.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_7.png"&gt;&lt;/p&gt;
&lt;p&gt;Third hunk should be added too&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_8.png"&gt;&lt;/p&gt;
&lt;p&gt;Once there are no more hunks, as we used the &lt;code&gt;git commit&lt;/code&gt; command, the editor
will be open to the user insert the commit message. That's it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_9.png"&gt;&lt;/p&gt;
&lt;p&gt;Now with the first commit contains the only the changes within &lt;code&gt;bar()&lt;/code&gt; function,
further hunks might be committed in the second commit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/partial_commit_10.png"&gt;&lt;/p&gt;
&lt;p&gt;I hope you have enjoyed the tip. ;)&lt;/p&gt;</content><category term="misc"></category><category term="git"></category></entry><entry><title>malloc/free implementation. Just4Fun!</title><link href="/mallocfree-implementation-just4fun.html" rel="alternate"></link><published>2015-11-26T00:08:00-02:00</published><updated>2016-01-24T22:22:00-02:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2015-11-26:/mallocfree-implementation-just4fun.html</id><summary type="html">&lt;p&gt;Some time ago I bought the The Linux Programming Interface book, one of the best books I have acquired.
One of the first chapters I read were about memory allocation. At the end of the chapter, author offers some exercises
to the reader. Among them there is a challenging one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some time ago I bought the The Linux Programming Interface book, one of the best books I have acquired.
One of the first chapters I read were about memory allocation. At the end of the chapter, author offers some exercises
to the reader. Among them there is a challenging one. He suggests to implement the equivalent to the malloc and free
functions. The challenge has been accepted!&lt;/p&gt;
&lt;p&gt;First of all, this implementation is just for study purposes. It means you should NOT start to implement your malloc and
free functions for production programs. Do not reinvent the wheel! The glibc are being improved for decades for many
great guys. You probably will take more time to do the equivalent excellent work! ;)&lt;/p&gt;
&lt;p&gt;I assume that you know a little bit about how a process and its segments works. It is nice remember this code does not
cover all details. As any software it can be improved (a lot).&lt;/p&gt;
&lt;h3&gt;System calls&lt;/h3&gt;
&lt;p&gt;There are two system calls allows the program to increase the program break, &lt;code&gt;brk&lt;/code&gt; and &lt;code&gt;sbrk&lt;/code&gt;. The program break defines
where is the end of process's data segment. It means if the program increases the program break, memory is allocated.
Otherwise, it deallocate memory. In this code only &lt;code&gt;sbrk&lt;/code&gt; is used, its only parameter defines the amount of memory program wants
to increase. If the program break has being increased successfully, a pointer to the beginning of the allocated memory is
returned. Otherwise, (void*) -1 is returned. &lt;code&gt;brk&lt;/code&gt; is not being used. It allows the program set the end of data segment to
the pointer passed in the functions arguments. I think this function is not being in use because the code does not decrease
the program break. Maybe in the future I implement this feature and use the &lt;code&gt;brk&lt;/code&gt; system call.&lt;/p&gt;
&lt;p&gt;For more details, take a look in the man page. ;)&lt;/p&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/ba82bdd0dfeb44c260aa.js?file=memory.c'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;/**
 * This source code contains a simple malloc and free functions implementation.
 * It was created just for study purposes
 */
#include &lt;unistd.h&gt;
#include "memory.h"

#define HEADER_SIZE sizeof(Header)
#define NUNITS(bytes) bytes / HEADER_SIZE

struct header {
	unsigned int size; //memory block size in bytes
	struct header *next; //next memory block in the free list
};
typedef struct header Header;

static Header* increase_heap(unsigned int);

static Header *free_list = NULL;
static Header base;

void* memory_alloc(size_t bytes)
{
	Header *block;
	Header *previous = &amp;base;
	unsigned int nunits = NUNITS(bytes);
	if(!nunits)
		nunits = 1;
	if(!free_list){
		//first call
		Header *block = increase_heap(nunits);
		block-&gt;next = &amp;base;
		base.size = 0;
		base.next = block;
		free_list = &amp;base;
	}
	//look for a memory block with enough size
	for(block = base.next; block != &amp;base; previous = block, block = block-&gt;next ){
		if(nunits &lt;= block-&gt;size){
			if(nunits == block-&gt;size){ //the current memory block has exactly size! \o/
				previous-&gt;next = block-&gt;next;
				block-&gt;next = NULL;
				return block + 1;
			}
			//the block is bigger. Let's split it
			Header *remain_block = block + 1 + nunits;
			remain_block-&gt;size = block-&gt;size - 1 - nunits;
			remain_block-&gt;next = block-&gt;next;
			previous-&gt;next = remain_block;
			block-&gt;size = nunits;
			return block + 1;
		}
	}
	//need more memory
	block = increase_heap(nunits);
	return block + 1;
}

void memory_free(void* ptr)
{
	Header *fblock = ((Header*)ptr) - 1;
	Header *block;
	Header *previous = &amp;base;
	for(block = base.next; block != &amp;base; previous = block, block = block-&gt;next){
		//let's find an adjacent memory block
		if((block + 1 + block-&gt;size) == fblock){
			block-&gt;size += fblock-&gt;size;
			ptr = NULL;
			return;
		} else if((fblock + 1 + fblock-&gt;size) == block){
			fblock-&gt;size += block-&gt;size + 1;
			fblock-&gt;next = block-&gt;next;
			previous-&gt;next = fblock;
			ptr = NULL;
			return;
		}
	}
	previous-&gt;next = fblock;
	fblock-&gt;next = &amp;base;
	ptr = NULL;
}

Header* increase_heap(unsigned int units)
{
#define MIN_ALLOC HEADER_SIZE * 2
	Header *block;
	if(units &lt;= 1)
		block = (Header*) sbrk(MIN_ALLOC);
	else
		block = (Header*) sbrk( (1 + units) * HEADER_SIZE);
	block-&gt;size = units;
	block-&gt;next = NULL;
	return block;
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;The cornerstone of the code is a linked list, called &lt;code&gt;free_list&lt;/code&gt;. It stores all available memories blocks. Each element is
composed for a header and the memory itself. The header is a structure that contains two metadata. The first field of the
struct is block's size and the second is a pointer to next memory block in the &lt;code&gt;free_list&lt;/code&gt;. The first thing necessary
when a program request some memory is check if the &lt;code&gt;free_list&lt;/code&gt; is already initialized (line 29). If not, it is initiated
with a block of 0 size (lines 29 ~ 36). This is done to keep the first element in the list always the same. Thus, it is more easy to know
when stop a loop through the list and reduce the code complexity.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/mem_init.png"&gt;&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;free_list&lt;/code&gt; initiated, a search in the list is performed. Looking for a memory block with enough size to attempt the
request. The algorithm follows the 'first fit' approach. It means that the first memory block found with enough size is
split and returned a pointer to the memory to the caller (lines 38 ~ 53). If any block has enough size, the heap is increased and the
new memory is returned (line 55). The pointer returned to the user is a pointer to the memory block itself. It is
not include the header. Does not make sense give to caller  access to the control structures. This structure is used only
for memory management and to know what is the memory block size when the program wants to frees it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/one_mem_allocate.png"&gt;&lt;/p&gt;
&lt;p&gt;As you can see between lines 26 and 28, all memory blocks are multiple of the header size. It means the minimum
memory size allocated is the HEADER_SIZE * 2 (with the header). This approach facilitate the pointer arithmetic and avoid
counting every single byte. In other words, even if the user requests less memory, the allocated memory will be always
multiple of the HEADER_SIZE.&lt;/p&gt;
&lt;p&gt;When the user wants to free a pointer, another search in the &lt;code&gt;free_list&lt;/code&gt; is performed. This time, looking for a memory block
next the to the block is being freed. If a block is found, the two blocks are merged into one (lines 64 ~ 77). Otherwise,
the block is appended in the list (lines 78 ~ 80). The goal of merge close blocks is avoid memory fragmentation. ;)&lt;/p&gt;
&lt;p&gt;According to my weak skill in asymptotic analysis, both functions have running time of O(n). Since each functions performed
a search in the &lt;code&gt;free_list&lt;/code&gt;. Please, tell me if I am wrong. I will study more about this topic and correct if I wrote
bullshit. The following sources are the header and a test program.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/869420fb87353049d4d7.js?file=memory.h'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#ifndef _MEMORY_HEADER
#define  _MEMORY_HEADER

/**
 * Allocates a block of memory with bytes of length
 * @returns a pointer to the allocated block of memory. Return NULL in error
 */
void* memory_alloc(size_t bytes);

/**
 * Deallocates the ptr block of memory
 * @returns 0 on success
 */
void memory_free(void* ptr);

#endif&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/869420fb87353049d4d7.js?file=sample.c'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;memory/memory.h&gt;

#define LOOP 10
#define ARRAY_LENGTH 10

struct ordinary {
	int a;
	float b;
	double c;
	long d;
	char e;
	void *f;
};

int main(){
	memory_free(memory_alloc(2048));
	int *i = (int*) memory_alloc(sizeof(int));
	int *i2 = (int*) memory_alloc(sizeof(int));
	*i = 2;
	*i2 = 100;
	printf("%d + %d = %d\n", *i, *i2, *i + *i2);
	memory_free(i2);
	memory_free(i);
	i = (int*) memory_alloc(sizeof(int));
	*i = 0;
	unsigned int index = 0;
	for(index = 0; index &lt; LOOP; index++ ){
		int *int_ptr = (int*) memory_alloc(sizeof(int));
		*int_ptr = index;
		*i += *int_ptr;
		memory_free(int_ptr);
	}
	printf("The sum of 0 until %d is %d\n", LOOP, *i);
	memory_free(memory_alloc(2048));
	memory_free(memory_alloc(2048));
	memory_free(memory_alloc(2048 * 5));
	struct ordinary *op =  (struct ordinary*) memory_alloc(sizeof(struct ordinary));
	op-&gt;a = 1;
	op-&gt;b = 1.0f;
	op-&gt;c = 9.99;
	op-&gt;d = 999l;
	op-&gt;e = 'a';
	op-&gt;f = i;
	printf("a = %d, b = %f, c = %f, d = %ld, e = %c, f = %p\n", op-&gt;a, op-&gt;b, op-&gt;c, op-&gt;d, op-&gt;e, op-&gt;f);
	memory_free(op);
	int *ia = (int*) memory_alloc(sizeof(int) * ARRAY_LENGTH);
	for(index = 0; index &lt; ARRAY_LENGTH; ++index){
		ia[index] = index * 2;
	}
	printf("[ ");
	for(index = 0; index &lt; ARRAY_LENGTH; ++index){
		if(index &lt; ARRAY_LENGTH -1)
			printf("%d, ", ia[index]);
		else
			printf("%d", ia[index]);
	}
	printf(" ]\n");
	memory_free(ia);
	exit(EXIT_SUCCESS);
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Feel free to ask me in the comments. =]&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://linux.die.net/man/2/sbrk"&gt;brk, sbrk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Linux-Programming-Interface-System-Handbook/dp/1593272200/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1448501399&amp;amp;sr=1-1&amp;amp;keywords=the+linux+programming+interface"&gt;The Linux Programing Interface&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1448501445&amp;amp;sr=1-1&amp;amp;keywords=the+c+programming+language"&gt;The C Programming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jvanz/tlpi"&gt;Repository&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="c"></category><category term="tlpi"></category><category term="glibc"></category><category term="memory"></category></entry><entry><title>cgo: Go lang with C</title><link href="/cgo-go-lang-with-c.html" rel="alternate"></link><published>2015-09-22T00:00:00-03:00</published><updated>2015-09-22T00:00:00-03:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2015-09-22:/cgo-go-lang-with-c.html</id><summary type="html">&lt;p&gt;Some weeks ago I had to customize the &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; to integrate it with some libraries written and C.
Maybe you already know Docker is written in Go language and to do this task was used &lt;a href="https://golang.org/cmd/cgo/"&gt;cgo&lt;/a&gt;
Cgo enables integrate Go code with C. It shows itself easier and smooth comparing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some weeks ago I had to customize the &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; to integrate it with some libraries written and C.
Maybe you already know Docker is written in Go language and to do this task was used &lt;a href="https://golang.org/cmd/cgo/"&gt;cgo&lt;/a&gt;
Cgo enables integrate Go code with C. It shows itself easier and smooth comparing with my past experiences with JNI&lt;/p&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;p&gt;To start let's code the old but gold hello world program. In the first example the program will just print a string that is returned by a C function.
As you can see in the following snippet, cgo allows to put C code inside the Go source code. The only thing has to do is import the pseudo-package &lt;code&gt;C&lt;/code&gt;.
The comments before this import is a C code that will be compiled as a header.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="c1"&gt;//char* get_msg(){&lt;/span&gt;
&lt;span class="c1"&gt;//      return &amp;quot;Hello Go!&amp;quot;;&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_msg&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More funny program&lt;/h2&gt;
&lt;p&gt;To make the things more funny, the next program will write the command line arguments to a file. Take a look the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;FILE *file;&lt;/span&gt;

&lt;span class="cm"&gt;int finish() {&lt;/span&gt;
&lt;span class="cm"&gt;    fflush(file);&lt;/span&gt;
&lt;span class="cm"&gt;    fclose(file);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;int init(const char* file_name) {&lt;/span&gt;
&lt;span class="cm"&gt;    if (file){&lt;/span&gt;
&lt;span class="cm"&gt;        finish();&lt;/span&gt;
&lt;span class="cm"&gt;    }&lt;/span&gt;
&lt;span class="cm"&gt;    file = fopen(file_name, &amp;quot;w+&amp;quot;);&lt;/span&gt;
&lt;span class="cm"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;int write_file(const char* data, size_t len) {&lt;/span&gt;
&lt;span class="cm"&gt;    if (!file){&lt;/span&gt;
&lt;span class="cm"&gt;        printf(&amp;quot;File is not open&amp;quot;);&lt;/span&gt;
&lt;span class="cm"&gt;        return 1;&lt;/span&gt;
&lt;span class="cm"&gt;    }&lt;/span&gt;
&lt;span class="cm"&gt;    if (fwrite(data, sizeof(char), len, file)) {&lt;/span&gt;
&lt;span class="cm"&gt;        return 0;&lt;/span&gt;
&lt;span class="cm"&gt;    }&lt;/span&gt;
&lt;span class="cm"&gt;    printf(&amp;quot;Error on writing...&amp;quot;);&lt;/span&gt;
&lt;span class="cm"&gt;    return 1;&lt;/span&gt;

&lt;span class="cm"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;unsafe&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsafe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program requires at least two arguments. The first one is the path for a file where the program will write the other arguments.
The code is quite simple. Go code uses three C functions to create, write and close a file. The C functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;init(const char* file_name)&lt;/code&gt;: function creates the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finish()&lt;/code&gt;: function flushes the data and closes the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write_file(const char* data, size_t len)&lt;/code&gt;: writes &lt;code&gt;len&lt;/code&gt; chars from string &lt;code&gt;data&lt;/code&gt; in the file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the beginning the Go code uses the &lt;code&gt;init&lt;/code&gt; function to create the file. After that, the program walks through other arguments writing each of them
in a file line. In the end, the program calls &lt;code&gt;finish&lt;/code&gt; function to close the file. Nothing so special, but illustrate how you can use cgo.
The C code written inside Go source code is used as a header. You can see the static library within &lt;code&gt;$GOPATH/pkg/&amp;lt;package name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It is important to remember that Go memory manager does not knows C variables and its allocated memory blocks. Thus, the programmer must to remember to free the allocated C string. Like it is being
doing in the lines &lt;code&gt;C.free(unsafe.Pointer(cs))&lt;/code&gt;. Otherwise, you will have memory leak issues.&lt;/p&gt;
&lt;p&gt;Furthermore, when some Go source file contains the special import "C" the Go tool looks for .c, .cpp, .cc and others files types in the same source code file directory. Then it compiles them with the default C/C++ compiler.
So you might do this:&lt;/p&gt;
&lt;p&gt;writer.go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;extern int finish();&lt;/span&gt;
&lt;span class="cm"&gt;extern int init(const char* file_name);&lt;/span&gt;
&lt;span class="cm"&gt;extern int write_file(const char* data, size_t len);&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;writer.c:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;w+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;File is not open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error on writing...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;This post is very, very, very simple. If you would like know more see the references below.&lt;/p&gt;
&lt;h5&gt;References&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://golang.org/cmd/cgo/"&gt;cgo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.golang.org/c-go-cgo"&gt;C? Go? Cgo!&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="golang"></category><category term="cgo"></category><category term="c"></category></entry><entry><title>Recovering missed data from stash</title><link href="/recovering-missed-data-from-stash.html" rel="alternate"></link><published>2014-02-15T00:00:00-02:00</published><updated>2014-02-15T00:00:00-02:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2014-02-15:/recovering-missed-data-from-stash.html</id><summary type="html">&lt;p&gt;Today my colleague almost lost everything that he did during 4 days! Because  a wrong git command he dropped his changes saved on stash.
After this sad episode we looked for a way to try to recover as least part of his work... and we did it!&lt;/p&gt;
&lt;p&gt;First of all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today my colleague almost lost everything that he did during 4 days! Because  a wrong git command he dropped his changes saved on stash.
After this sad episode we looked for a way to try to recover as least part of his work... and we did it!&lt;/p&gt;
&lt;p&gt;First of all, when you are implementing some big feature, split it in small pieces and commit it regularly. It's not a good idea stay so long time without commit your changes,  so take care.&lt;/p&gt;
&lt;p&gt;Let's simulate a scenario to show what you can do when you lost some changes dropped from stash.
On our repository we have only one source file, main.c. We will use it to demonstrate the problem and the solution... so, our repository now is been like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_01.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;and he have only an commit, the initial commit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_02.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;The first version of out file is:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_03.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;So, let's start to code something. For this example, we do not need some big change, is only something to put in the stash. For this, I just will add a new line. The git-diff output should be:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_04.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Now, suppose that you have to pull some new changes from remote repository and you do not want to commit you changes. Thus, you decided to stashed your changes, pull the changes from remote repository
and apply your changes again on the master.  For this, you execute the following command to move your changes to stash:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Looking into the stash we can see our changes there:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_06.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Now our code is in a safe place and the master branch is clean ( check with &lt;code&gt;git status&lt;/code&gt;) and you can pull the changes. After pulled the changes, it's time to apply your changes again on the master.
But accidentally you execute&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash drop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;instead of:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and now, if you execute &lt;code&gt;git stash list&lt;/code&gt; again, you can see that you dropped changes from the stash and does not apply them again on the master branch. OMG! Who can help us?
As you will seen soon git did not delete the object that contains your changes. It just remove the reference to it.
To prove this you can used the &lt;code&gt;git-fsck&lt;/code&gt; command, this command verifies the connectivity and validity of the objects in the database.
On the begin of the repository I executed the &lt;code&gt;git-fsck&lt;/code&gt; command and the output were:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_07.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Basically, I asked &lt;code&gt;git-fsck&lt;/code&gt; show me the objects that are unreachable ( &lt;code&gt;--unreachable&lt;/code&gt; argument ). As you can see, it didn't show any unreachable object.
After I dropped the changes on my stash I executed the same command, and the output was different:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_08.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;Now, we can see 3 unreachable objects. But which is our changes? Actually, I don't know. We have to search for it, for this job you can execute the &lt;code&gt;git-show&lt;/code&gt; command for visualize what are each objects.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/missing_data_from_stash_09.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;There it is! The ID 95ccbd927ad4cd413ee2a28014c81454f4ede82c is our changes. Ok, we found your missed changes. Let's recover it!
An possible solution is checkout the ID into a new branch or apply the commit directly. Once you have the ID of the object with your changes is up to you decide what is the best way to put changes on the master branch again.
For this example I will use the &lt;code&gt;git-stash&lt;/code&gt; to apply the commit on my master branch again.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash apply 95ccbd927ad4cd413ee2a28014c81454f4ede82c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A important thing to remember, git run its garbage collector periodically. After the gc execution you cannot see more the unreachable objects using &lt;code&gt;git-fsck&lt;/code&gt;. ;)&lt;/p&gt;</content><category term="misc"></category><category term="git"></category></entry><entry><title>From Brazil to Germany, an Unforgettable LibreOffice Hackfest in Freiburg</title><link href="/from-brazil-to-germany-an-unforgettable-libreoffice-hackfest-in-freiburg.html" rel="alternate"></link><published>2014-01-24T00:00:00-02:00</published><updated>2014-01-24T00:00:00-02:00</updated><author><name>José Guilherme Vanz</name></author><id>tag:None,2014-01-24:/from-brazil-to-germany-an-unforgettable-libreoffice-hackfest-in-freiburg.html</id><summary type="html">&lt;p&gt;While I have not decided what it will be my first post about development stuff I'll post the text that me and my friend wrote to the The Document Foundation's blog. In that text we talked about out trip to LibreOffice hackfest in freiburg.
From Brazil to Germany, an Unforgettable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While I have not decided what it will be my first post about development stuff I'll post the text that me and my friend wrote to the The Document Foundation's blog. In that text we talked about out trip to LibreOffice hackfest in freiburg.
From Brazil to Germany, an Unforgettable LibreOffice Hackfest in Freiburg&lt;/p&gt;
&lt;p&gt;José Guilherme Vanz and Marcos Souza, LibreOffice development in Brazil&lt;/p&gt;
&lt;p&gt;Our first contact with the LibreOffice was in FISL 2012 (International Forum of Free Software, held in Porto Alegre, Brazil). Since then, we got quickly involved with the LibreOffice development community. Now we attend events in Brazil advocating to people about the better office suite ever done!
Months ago, after some time contributing to the project and participating in LibreOffice community, we, José Guilherme Vanz and Marcos Paulo de Souza were invited to participate in the Freiburg LibreOffice Hackfest. We were very happy and very excited! This invitation showed us that we were recognized for our humble work in the project and because this is a unique opportunity to work with people that we just know by mailing or IRC chats. So, we started the preparations of travel, such as paperwork, funds and a negotiation with our employers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hackfest_01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;We arrived in Germany thinking about how to learn more about LibreOffice code base, and learn some tips and tricks to code while contributing with the project. The guys at the hackfest work full time in the project, so we were very excited to improve our skills, including stuffs about how to make a nice hackfest and try setup one in Brazil!
Our journey in Germany began in the beautiful city of Munich, where we stayed for two days. We met Christian Lohmaier, the current release engineer of LibreOffice project. He and Florian Effenberger were patient and generous to show Munich to us and all nice places of this nice city! Thanks a lot guys!
Then we went to Freiburg, where the Hackfest was to start. The event took three days. We had the opportunity to meet some of the most famous mega developers! It was a very nice experience to link faces and names to IRC nicks, and of course, to question the “pythons” of the project in real time! Surely, we learned a lot in these 3 days!
Marcos did some work in LibreOffice Math. The first was about including tooltips in the new Elements Dock. To solve this bug, we basically need to create some strings with the descriptions of each element in the Elements Dock. These strings are stored inside “.src” files. These files are “compiled” and used by translators to translate each string to a specific language used in the user interface of LibreOffice. This fix was not difficult, just painful!
The second bug that Marcos worked was about to implement a scrollbar in the Elements Dock. We did not finish this fix because he had some doubts and some points that need some other fixes. Still in the event, we talked with some others hackers about other issues.
I was focused trying to execute a static checker to detect some error prone code and fix them&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hackfest_02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After three days of hackfest, we started the “Hamburg Home Hacking Marathon”! We stayed four days in Hamburg, coding in the house of LibreOffice enginners! Again, we had the pleasure to work with Eike Ratke, Michael Stahl, Stephan Bergmann and Bjoern Michaelsen. All of them willing to help us teaching about the code base and showing some tips.
Using our precious time with them, Marcos worked in the issue 60698 (https://bugs.freedesktop.org/show_bug.cgi?id=60698). This bug is about unify some shared libraries that are built by few files. Doing this we get a smaller library because these libraries are compiled and built just once, and by this we avoid the dispersion of shared libraries. Working in this bug, Marcos unified all shared libraries of IO module.
Marcos tried yet to solve a bug in Calc, with the help of Eike as mentor. This bug was about ODS files using link to another sheets. By changing the referenced files, Calc was not allowed to update the data inside the file that was referencing. But, this bug was not so easy, and the problem was bigger than we thought. So we couldn’t solve this bug in that time, and Eike removed the bug from the easy hacks.
And I was still working in static checker. I started to look to a bug of Math, about the user interface. After some work, I fixed that bug!
In the third day, we went back to Stephan’s place, trying to solve bugs and learn more! This day Bjoern went to Stephan’s house too, totaling six guys programming in the same table! In this day Marcos worked in a bug(https://bugs.freedesktop.org/show_bug.cgi?id=63020) indicated by Bjoern. That bug was related to removing a class from LibreOffice. With Stephan’s help, Marcos could remove that class and use a better approach in the code.
And in the last day, we went again to Eike’s home, where we enjoyed to last moments with the great developers of LibreOffice! We talked a little about their work and how they work daily.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hackfest_02.jpg"&gt;&lt;/p&gt;
&lt;p&gt;For sure, these days were very fruitful, and we learned a lot of things that we’ll use in the future.
We came back to Brazil and we want to say a big THANK YOU for all of you guys! To the  Brazilian community, that welcomed us and keeps helping us. To The Document Foundation, who gave us this opportunity. To all developers that are helping us since we started in the project, specially YOU we met this wonderful German journey, and all people involved directly or indirectly in this amazing project!&lt;/p&gt;
&lt;p&gt;Source: http://blog.documentfoundation.org/2013/12/04/from-brazil-to-germany-an-unforgettable-libreoffice-hackfest-in-freiburg/&lt;/p&gt;
&lt;p&gt;Portuguese version: http://blog.pt-br.libreoffice.org/2013/12/09/do-brasil-para-a-alemanha-um-inesquecivel-hackfest-em-freiburg/&lt;/p&gt;</content><category term="misc"></category><category term="hackfest"></category><category term="libreoffice"></category><category term="travel"></category><category term="germany"></category></entry></feed>